<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>手机WI-FI信号采集网络的设计与实现</title>
      <link href="/2018/12/28/%E6%89%8B%E6%9C%BAWI-FI%E4%BF%A1%E5%8F%B7%E9%87%87%E9%9B%86%E7%BD%91%E7%BB%9C%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/"/>
      <url>/2018/12/28/%E6%89%8B%E6%9C%BAWI-FI%E4%BF%A1%E5%8F%B7%E9%87%87%E9%9B%86%E7%BD%91%E7%BB%9C%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="手机WI-FI信号采集网络的设计与实现"><a href="#手机WI-FI信号采集网络的设计与实现" class="headerlink" title="手机WI-FI信号采集网络的设计与实现"></a>手机WI-FI信号采集网络的设计与实现</h1><p>@(VPR)[信号采集|Wi-Fi|网络|手机|大学本科毕业设计]</p><p><strong>XXXX</strong>是一种基于Esp8266开发模块的信号采集设备，其利用现代物联网热潮下的硬件亮点：“轻巧”和“灵活”两大特点为大范围采集信号奠定基础，通过探针数据的提取和mesh网络技术达到收集信号的效果，特点概述：</p><ul><li><strong>使用方便</strong> ：通过预先设置的采集算法，只要用户为设备提供电源即可；</li><li><strong>部署灵活</strong> ：通过Mesh网络的构建，可以实现轻便、高效的接力数据传输；</li><li><strong>适用性高</strong> ：采用mqtt协议，实现了数据在高延迟/带宽优先的网络上的传输；</li><li><strong>成本低廉</strong> ：Esp8266开发板本身的物理硬件成本低廉，；</li></ul><p>作者：战权海   联系方式：<a href="mailto:1137288942@qq.com" target="_blank" rel="noopener">1137288942@qq.com</a>  开始时间：2018年10月2日</p><p><strong>项目说明：</strong><br>本项目起源于学校本身的SRT，后将项目中的信号采集网络部分拆分出来作为毕业设计模块，因此会首先更新WI-FI信号采集网络部分，正巧也是该项目中的第一部分，也是最基础，最基层的部分，该项目的好坏直接影响着后续工作的发展。</p><p><strong>更新在2018年11月10日</strong><br>根据导师前段时间的介绍交流，对项目情况作出如下了解：<br>1.该采集网络要基于esp8266开发板，其资料主要参考乐鑫公司产品说明<br>2.已采购四博智联的断网神器、Wi-Fi探针普通版及http上传版，准备采集源码随后进行分析<br>3.已采购W32集成开发板，着手在空板子上实行代码<br>4.该网络主要基于mqtt网络协议</p><pre><code>并于当日撰写开题报告</code></pre><p><strong>更新在2018年11月17日</strong><br>由于上周一直在忙着考试复习，没有时间关注毕设的事情，下周二要进行开题答辩，因此要进行好好准备</p><p><strong>更新在2018年11月27日</strong><br>最近一直在忙于CTF比赛，今天终于有时间静下心来好好研究项目，但是一上来就被卡住，使用Arduino开发的并不是十分顺利，使用数据线连接到电脑上，使用esptool就可以进行烧写，但是没搞懂要把程序写在哪里，使用Arduino IDE进行开发时，代码始终不能上传，很头疼，不知道怎么处理</p><p><strong>更新在2018年12月28日</strong><br>一晃又过了一个月，这个项目的进展程度确实特别的小，1月13日就要进行阶段性检查，还蛮头疼的。好在上周发现好像是esp板子型号的问题，自己重新采购了一块esp8266，昨天一次性就烧录成功。接下来要做的就是进行简单的开发，具体的mesh网络与mqtt源码已经在github上search到了，要好好学习一下。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 毕业设计 </tag>
            
            <tag> Wi-Fi信号采集 </tag>
            
            <tag> Iot开发 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2018网络安全攻防演练</title>
      <link href="/2018/12/27/2018%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2%E6%BC%94%E7%BB%83/"/>
      <url>/2018/12/27/2018%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2%E6%BC%94%E7%BB%83/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>周六当晚接到的学院通知，匆匆忙忙回去请假，周天就要报道入住，了解了规则后，觉得这次活动的成长肯定会不少，毕竟不是比赛，没有那么大的压力，从头至尾的保密工作还是比较严格的。当然，这篇文章中不会透露任何过程中涉及的内容，仅是我个人的体会与技术分享。（ps.可能会比较枯燥）</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="我的演练过程"><a href="#我的演练过程" class="headerlink" title="我的演练过程"></a>我的演练过程</h2><p>此次活动主要是以实战网络攻击为主，依靠的是漏洞挖掘与内网渗透的技能。如果平时大佬们挖src比较多或者有很多实战经验的话应该会很得心应手。</p><p>起初的思路有点问题，想依照这awd的模式进行批量攻击，先简要过滤出可能存在的网站，然后再逐个细致挖掘。但这样操作的话，效率十分低下，扫描器的效能问题先搁置不提，单单对一个可能存在漏洞的网站进行挖掘就已经很费时间了，更不要提利用。</p><p>这里说明下，实战不同于src，讲究更多的是利用，而不是发现漏洞。举个例子，在src挖掘过程中，证明某个网站存在sql注入漏洞可以注出数据，拖库是件很了不得的事情，但在实战中，你需要注出管理员的用户名与密码，登陆进去查看能获得什么重要类型的数据，以此来表示该漏洞的威胁程度。</p><p>因此在最开始的一段时间，没有头绪，仅仅是在主域名下不断查找可能存在的漏洞点。随后初见雏形，在某个门户网站下发现了很多的管理系统，开始尝试弱口令的爆破，也是就凭着这三板斧，拿下了几个后台。但后续的利用方式显得十分鸡肋，找到了文件上传的点，但是在上传、连接的过程中经验不足，没能成功getshell。</p><p>最后面的两天基本上没能拿下啥重要的网站，一方面是自己做这方面的经验太少了，另外也是技术不够扎实不够娴熟。</p><h2 id="与大佬的经验交流"><a href="#与大佬的经验交流" class="headerlink" title="与大佬的经验交流"></a>与大佬的经验交流</h2><p>过程中，认识几位从事这方面的牛人，成绩也是十分靠前，经过交流也是学到了很多东西</p><p>在做攻击的过程中，信息搜集的部分永远都应该是花的时间最长而且最为细致的一个，这一环节在做的主要就是进行打击面的拓宽。利用搜索引擎的site、ip等功能尽可能多的获取到同源的网站。最后利用nmap进行端口的扫描，总能在其中发现一些纰漏。这样下去再进行子域名的爬去，攻击面就得到了指数级的增长。可以这样来算，同样利用弱口令，我真对一个网站只有一次攻击机会，对方经过攻击面的拓展，在同一台主机下发现了100个旁站，那么对于他拿下这台主机的次数就增加了100次。效果可想而知。</p><p>还有就是平时经验的积累，怎样绕过waf、利用怎样的文件后缀可以上传小码、大码到服务器上，怎样通过host文件过狗，这都需要长时间的经验积累，一眼就能识别编辑器的类型，想到最近爆出的某某漏洞，从而加以利用。</p><p>自动化工具，批量化工具固然好用，但是在真实的网络战场上，是不容许你去进行多次尝试的，甚至没有第二次机会。因为身为网站的维护着也不是吃素的，也是会搭载些检测警报系统与安全防护系统的。</p><p>最重要的一点写在这里，现如今网络安全法已经出台有几年了，各位师傅们大佬们还是要谨言慎行，平时开开玩笑就好了，别真的搞出来事情，敲几下键盘是小事，给别人造成麻烦与损失进了局子可就不简单了。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>我自认为自己入门网络安全也就刚刚一年，才疏学浅，还是很菜的，更多的时间都是在接触CTF竞赛，经过这两次的awd与实战演练，原来CTF也仅仅只是个入门。它更多的是将条件为你构造清楚，选手们去利用各种骚操作进行绕过。但在实战环境中，往往最为基础，最为简单的手法会发现更为严重的漏洞，基础和入门固然重要，小白们也请不要局限于此，专注了眼前的树叶却没看见正片森林。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 实战 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2018安恒杯十二月月赛-部分WriteUp</title>
      <link href="/2018/12/22/2018%E5%AE%89%E6%81%92%E6%9D%AF%E5%8D%81%E4%BA%8C%E6%9C%88%E6%9C%88%E8%B5%9B-%E9%83%A8%E5%88%86WriteUp/"/>
      <url>/2018/12/22/2018%E5%AE%89%E6%81%92%E6%9D%AF%E5%8D%81%E4%BA%8C%E6%9C%88%E6%9C%88%E8%B5%9B-%E9%83%A8%E5%88%86WriteUp/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>早早的就报了名，可惜今天满课，只有中午和下午4点之后的时间打了一下比赛，pwn题是战队的大佬帮忙出的，听说蛮简单的，等Peanuts大佬更新出WriteUp我再更新学习下。总的来说月赛的题目难度较小，比较适合新手入门。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h3><p>解压题目包，给出了两个文件</p><pre><code>-备忘录.txt-只要学不死就往死里学.zip</code></pre><p>通过解压软件可以看到在zip包中也存在“备忘录.txt“<br>这样的话，必然是已知明文攻击了</p><p><a href="http://www.cnblogs.com/leixiao-/p/9824557.html" target="_blank" rel="noopener">zip的各种攻击方式</a></p><p>这样就可以获得破解密码 <strong>1qazmko098</strong></p><p>解压得到了一个word文件</p><pre><code>-学习资料.docx</code></pre><p><img src="https://i.imgur.com/KxfXS1P.jpg" alt=""></p><p>参考这其中的方法 <a href="https://blog.csdn.net/DRondong/article/details/79322799" target="_blank" rel="noopener">word隐写方法</a></p><p>移动图片就能看到flag</p><p><img src="https://i.imgur.com/NwgyFtX.jpg" alt=""></p><h3 id="JUJU"><a href="#JUJU" class="headerlink" title="JUJU"></a>JUJU</h3><p>直接解压出一个损坏的png文件</p><pre><code>-juju.png</code></pre><p>因此先使用010editor修复下</p><p>直接跑png模板就能将CRC校验值修改过来，从而能正常打开图片</p><p>题目中提示有11只猪，但明显图片上的数目不够，因此考虑是不是要修改图片长度</p><p><a href="https://blog.csdn.net/persist213/article/details/79374914" target="_blank" rel="noopener">misc中的png隐写</a></p><p>从中可以了解到，png的宽度是不可以更改的，但是长度可以进行修改，因此稍微将长度加大，就可以在下文中看到字符串</p><p><img src="https://i.imgur.com/nq8lv5n.jpg" alt=""></p><pre><code>MZWGCZ33GQZTQMTEM5SGMMTEPU=====</code></pre><p>显然不是base64（base64最多只能有两个=）</p><p>因此考虑尝试其他base编码，经过base32解码后能看到flag</p><p><img src="https://i.imgur.com/7dpWJxF.png" alt=""></p><p>按要求将{}中的字符串md5后就是最后的答案</p><h2 id="Blockchain"><a href="#Blockchain" class="headerlink" title="Blockchain"></a>Blockchain</h2><h3 id="CoinFlip"><a href="#CoinFlip" class="headerlink" title="CoinFlip"></a>CoinFlip</h3><p>我也是第一次接触区块链的题目，也是听说晚上有原题，就搜了下然后进行了复现</p><p><a href="https://www.secpulse.com/archives/73682.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/73682.html</a></p><p><a href="http://foreversong.cn/archives/1295" target="_blank" rel="noopener">http://foreversong.cn/archives/1295</a></p><p><a href="https://remix.ethereum.org/" target="_blank" rel="noopener">https://remix.ethereum.org/</a></p><p>将.sol文件直接拖进去，按照</p><p><a href="https://www.linkedbyx.com/taskinfo/368/detail" target="_blank" rel="noopener">https://www.linkedbyx.com/taskinfo/368/detail</a></p><p>文章里的操作步骤进行复现</p><p>要注意找好对应的版本</p><p><img src="https://i.imgur.com/oFziHrn.jpg" alt=""></p><p><img src="https://i.imgur.com/78xqDhM.jpg" alt=""></p><p>最后就能到邮件中收到flag</p><p>flag{e0a8634dbb9bd36581a65ca00e2ca886}</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>凑巧今天并列第三名，拿了10w积分，才知道原来安恒的奖励力度这么高（我才不是为了奖励…）这样的话，还是要多参加一下的哈哈哈哈。写的不够到位，各位大佬可以发邮件批评指正，邮箱就在头像下方呦！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 安恒月赛 </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Crypto Task 1</title>
      <link href="/2018/12/21/Crypto-Task-1/"/>
      <url>/2018/12/21/Crypto-Task-1/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>也是采取任务发布的形式，每周保证上交一次任务完成报告，组织一次在线交流，通过积分制来进行最后的评测，昨天是第一次任务的截止时间，效果上并不理想，看今晚在线交流的情况再做调整。如果不愿意花时间去学习，是永远出不来成绩的。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>本次任务选取的是Cryptopal的Set1.1-1.3，难度很小，适合入门，编程小白稍微花点时间就应该可以看的懂。另外，附上“南宁市网络安全竞赛“的两道密码题。</p><h2 id="Set-1"><a href="#Set-1" class="headerlink" title="Set 1"></a>Set 1</h2><h3 id="Challenge-1"><a href="#Challenge-1" class="headerlink" title="Challenge 1"></a>Challenge 1</h3><p><img src="https://i.imgur.com/jiQrNFF.jpg" alt=""><br>挑战1 目的是将十六进制（hex）进行base64加密<br>所给的字符串为</p><pre><code>49276d206b696c6c696e6720796f757220627261696e206c696b65206120706f69736f6e6f7573206d757368726f6f6d</code></pre><p>经过base64后的输出应为</p><pre><code>SSdtIGtpbGxpbmcgeW91ciBicmFpbiBsaWtlIGEgcG9pc29ub3VzIG11c2hyb29t</code></pre><hr><p><strong>新手不要依赖于在线网站和工具！！！这不利于理解原理并掌握其思想，若你想做一个无脑的脚本小子，那么请继续吧！</strong></p><p>重所周知anaconda中已经集成好了很多模块，其中就包括base64，直接import就好</p><p><strong>exp1</strong></p><pre><code># -*- coding: UTF-8 -*-import base64string_hex = &apos;49276d206b696c6c696e6720796f757220627261696e206c696b65206120706f69736f6e6f7573206d757368726f6f6d&apos;# 将十六进制编码的字符进行解码string = string_hex.decode(&apos;hex&apos;)print string# 进行base64加密string_base = base64.b64encode(string)print &apos;result :&apos; + string_base</code></pre><p>具体的细节操作要自己写一遍，细细体会编程中要注意的地方，怎样更贴近人意</p><p><strong>进一步加强</strong></p><p>上述代码还是不能让我们很好的理解base64的过程，因此可以进一步扩展去了解下base64，然后自己写一个本地的base64模块。</p><p><a href="http://www.cnblogs.com/diligenceday/p/6002382.html" target="_blank" rel="noopener">base64详解</a></p><p><strong>local_base64.py</strong></p><pre><code># -*- coding: UTF-8 -*-import stringbase64_charset = string.ascii_uppercase + string.ascii_lowercase + string.digits + &apos;+/&apos;def encode(string):    base64_bin = [&apos;{:0&gt;8}&apos;.format(str(bin(ord(b))).replace(&apos;0b&apos;, &apos;&apos;)) for b in string]    result = &apos;&apos;    nums = len(base64_bin) // 3    remain = len(base64_bin) % 3    integral_part = base64_bin[0:3 * nums]    while integral_part:        tmp_part = &apos;&apos;.join(integral_part[0:3])        tmp_part = [int(tmp_part[x: x + 6], 2) for x in [0, 6, 12, 18]]        result += &apos;&apos;.join([base64_charset[i] for i in tmp_part])        integral_part = integral_part[3:]    if remain:        remain_part = &apos;&apos;.join(base64_bin[3 * nums:]) + (3 - remain) * &apos;0&apos; * 8        tmp_part = [int(remain_part[x: x + 6], 2) for x in [0, 6, 12, 18]][:remain + 1]        result += &apos;&apos;.join([base64_charset[i] for i in tmp_part]) + (3 - remain) * &apos;=&apos;    return resultdef decode(string):    if not valid_base64_str(string):        return &apos;&apos;    base64_bin = [&apos;{:0&gt;6}&apos;.format(str(bin(base64_charset.index(s))).replace(&apos;0b&apos;, &apos;&apos;)) for s in string if s != &apos;=&apos;]    result = &apos;&apos;    nums = len(base64_bin) // 4    remain = len(base64_bin) % 4    integral_part = base64_bin[0:4 * nums]    while integral_part:        tmp_unit = &apos;&apos;.join(integral_part[0:4])        tmp_unit = [int(tmp_unit[x: x + 8], 2) for x in [0, 8, 16]]        result += &apos;&apos;.join([chr(i) for i in tmp_unit])        integral_part = integral_part[4:]    if remain:        remain_part = &apos;&apos;.join(base64_bin[nums * 4:])        tmp_unit = [int(remain_part[i * 8:(i + 1) * 8], 2) for i in range(remain - 1)]        result += &apos;&apos;.join([chr(i) for i in tmp_unit])    return resultdef valid_base64_str(b_str):    if len(b_str) % 4:        return False    for m in b_str:        if m not in base64_charset + &apos;=&apos;:            return False    return Trueif __name__ == &apos;__main__&apos;:    s = &apos;ABC&apos;    s_encode = encode(s)    s_decode = decode(s_encode)    print s_encode    print    print s_decode</code></pre><p><strong>exp2</strong></p><pre><code># -*- coding: UTF-8 -*-import local_base64string_hex = &apos;49276d206b696c6c696e6720796f757220627261696e206c696b65206120706f69736f6e6f7573206d757368726f6f6d&apos;string = string_hex.decode(&apos;hex&apos;)print stringstring_base = local_base64.encode(string)print &apos;result :&apos; + string_base</code></pre><p>经过challenge1应该就能够对base64有一个很详细的了解了，还是要自己亲身尝试下才能真正掌握并转化成自己的东西。</p><h3 id="Challenge-2"><a href="#Challenge-2" class="headerlink" title="Challenge 2"></a>Challenge 2</h3><p><img src="https://i.imgur.com/GRIqD3Y.jpg" alt=""></p><p>挑战2 目的是让你编写一个函数，使得当你输入</p><pre><code>1c0111001f010100061a024b53535009181c</code></pre><p>让上述字符串，与下列字符串进行异或（XOR）运算</p><pre><code>686974207468652062756c6c277320657965</code></pre><p>得到的结果应该为</p><pre><code>746865206b696420646f6e277420706c6179</code></pre><hr><p>只需要进行一个异或运算，感觉起来应该不难，让我们先来了解下XOR运算操作</p><p><a href="https://blog.csdn.net/xiaopihaierletian/article/details/78162863" target="_blank" rel="noopener">逻辑运算详解</a></p><p>通过上述运算原理的介绍，可以看出这道题目就是等长度异或，实现起来很容易</p><p><strong>exp</strong></p><pre><code># -*- coding: UTF-8 -*-string_hex = &apos;1c0111001f010100061a024b53535009181c&apos;string = int(string_hex,16)string_xor = &apos;686974207468652062756c6c277320657965&apos;string_xor = int(string_xor,16)string_result = string ^ string_xorstring_result = hex(string_result)print &apos;result :&apos; + string_result[2:-1]</code></pre><h3 id="Challenge-3"><a href="#Challenge-3" class="headerlink" title="Challenge 3"></a>Challenge 3</h3><p><img src="https://i.imgur.com/hkCqCx1.jpg" alt=""></p><p>挑战3 题意是给定的下列字符串</p><pre><code>1b37373331363f78151b7f2b783431333d78397828372d363c78373e783a393b3736</code></pre><p>是明文与某个单字符异或得到的，让我们找到密钥，并解密出明文的内容</p><p>可以手工完成，但请不要：请编写代码完成</p><hr><p>既然是编写函数，那必然要了解python中的def</p><p><a href="https://www.cnblogs.com/derezzed/articles/8119592.html" target="_blank" rel="noopener">python中的def</a></p><p>先不考虑评分标准，要先找到那个单字符<br>回想一下ascii码中一共有256个，虽然一个一个尝试对于人来说比较缓慢，但对于计算机来说应该不到一秒钟的事。所以这里决定来进行遍历尝试，也就是俗称的“暴力破解”</p><p><strong>暴力破解模块</strong></p><pre><code>def brute(string_xor):    score_pre = 0    for i in range(128):        result = &apos;&apos;        for j in re.findall(&apos;.{2}&apos;,string_xor):            k = int(j,16)            r = chr(i ^ k)            result += r</code></pre><p>这样的话，256种结果都会被存储到result中，接下来解决打分的问题，只需要对每个result进行个测评，然后比较下输出最高的就好了。</p><p><strong>exp</strong></p><pre><code># -*- coding: UTF-8 -*-import restring_xor = &apos;1b37373331363f78151b7f2b783431333d78397828372d363c78373e783a393b3736&apos;def judge(s):    score_tmp = 0    freqs = {&apos;a&apos;:0.0651738,&apos;b&apos;:0.0124248,&apos;c&apos;:0.0217339,&apos;d&apos;:0.0349835,         &apos;e&apos;:0.1041442,&apos;f&apos;:0.0197881,&apos;g&apos;:0.0158610,&apos;h&apos;:0.0492888,         &apos;i&apos;:0.0558094,&apos;j&apos;:0.0009033,&apos;k&apos;:0.0050529,&apos;l&apos;:0.0331490,         &apos;m&apos;:0.0202124,&apos;n&apos;:0.0564513,&apos;o&apos;:0.0596302,&apos;p&apos;:0.0137645,         &apos;q&apos;:0.0008606,&apos;r&apos;:0.0497563,&apos;s&apos;:0.0515760,&apos;t&apos;:0.0729357,         &apos;u&apos;:0.0225134,&apos;v&apos;:0.0082903,&apos;w&apos;:0.0171272,&apos;x&apos;:0.0013692,         &apos;y&apos;:0.0145984,&apos;z&apos;:0.0007836,&apos; &apos;:0.1918182         }    for x in s.lower():        if x in freqs:            score_tmp += freqs[x]    return score_tmpdef brute(string_xor):    score_pre = 0    for i in range(128):        result = &apos;&apos;        for j in re.findall(&apos;.{2}&apos;,string_xor):            k = int(j,16)            r = chr(i ^ k)            result += r        score = judge(result)        if score &gt; score_pre:            score_pre = score            final = result            key = chr(i)    return final,keyfinal,key = brute(string_xor)print finalprintprint key</code></pre><p>这里是字母采用频率的方法进行测评，python3中带有wordfreq模块直接可以查取字符频率，无奈使用的是python2，只能采用其他人收集的频率情况。</p><h2 id="南宁市网络安全技术大赛（Crypto）"><a href="#南宁市网络安全技术大赛（Crypto）" class="headerlink" title="南宁市网络安全技术大赛（Crypto）"></a>南宁市网络安全技术大赛（Crypto）</h2><p>writeup分享者：Mengmeng</p><h3 id="维吉尼亚遇上困难"><a href="#维吉尼亚遇上困难" class="headerlink" title="维吉尼亚遇上困难"></a>维吉尼亚遇上困难</h3><p>密文：<br>BZGTNPMMCGZFPUWJCUIGRWXPFNLHZCKOAPGLKYJNRAQFIUYRAVGNPANUMDQOAHMWTGJDXGOMPJPTKAAVZIUIWKVTUCWBWNFWDFUMPJWPMQGPTNWXTSDPLPMWJAXUHHXWPFXXGVAPFNTXVFKOYIRBOQJHCBVWVFYCGQFGUSUBDWVIYATJGTBNDKGHCTMTWIUEFJITVUGJHHIMUVJICUWYQWYGGUWPUUCWIFGWUANILKPHDKOSPJTTWJQOJHXLBJAPZHVQWPDYPGLLGDBCHTGIZCCMEGVIIJLIFFBHSMEGUJHRXBOQUBDNASPEUCWNGWSNWXTSDPLPMWJAIUHUMWPSYCTUWFBMIAMKVBNTDMQNBVDKILQSSDYVWVXIGDQFIBHSLEAVDBXGOLGDBCHTGIZVNFQFKTNGRWXUDCTGKWCOXIXKZPPFDZGXNBAXLGGWBLTLWCKOXAR</p><p>题目已经给出很明显的提示了，是维吉尼亚密码，根据密文的长度，可以确定是想让我们进行无密钥破解维吉尼亚密码，原理如下：</p><p><a href="https://blog.csdn.net/limisky/article/details/16885959" target="_blank" rel="noopener">维吉尼亚密码及其破解原理</a></p><p>用github上的工具，跑一下,得到flag<br><img src="https://i.imgur.com/QMFAvbz.png" alt=""></p><p><a href="https://atomcated.github.io/Vigenere/" target="_blank" rel="noopener">维吉尼亚无密钥破解工具</a></p><p>该工具可以直接下载下来，部署到本地</p><p>flag:{YOU ARE SO KINDLY}</p><h3 id="shamir重要数据损坏"><a href="#shamir重要数据损坏" class="headerlink" title="shamir重要数据损坏"></a>shamir重要数据损坏</h3><p>该题目考查的是Shamir秘密共享算法</p><p> <img src="https://i.imgur.com/KyHYt6N.png" alt=""></p><p> 大概了解了之后用题目给的信息进行计算<br> <img src="https://i.imgur.com/INN4jMu.png" alt=""></p><p> X1=5，X2=7，X3=9</p><p>（X_1,f(X_1)）=(5,2258)</p><p>（X_2,f(X_2)）=(7,2424)</p><p>（X_3,f(X_3)）=(9,2630)</p><hr><p>a0+a_1 x_1+a_2 x_1^2=2258</p><p>a0+a_1 x_2+a_2 x_2^2=2424</p><p>a0+a_1 x_3+a_2 x_3^2=2630</p><p>代入x1,x2,x3,经计算可得a0=2018，a1=23,a2=5<br>所以s=a0=2018<br>flag：{2018}</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>对于小白来讲，可能会觉得这些东西有点晦涩。但我想说的是，这仅仅只是个入门，至今为止我都坚信一万个小时定律，这段时间的锤炼是让你从平凡变成大师的过程，若是能踏踏实实走完，想必你不会后悔，我会伴随你们一同前行，加油我们的信安之路！</p>]]></content>
      
      
      
        <tags>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello my New World</title>
      <link href="/2018/12/20/Hello-my-New-World/"/>
      <url>/2018/12/20/Hello-my-New-World/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天给萌萌尝试着搭建了这个博客，花了差不多半天的时间，部分功能还没调试完成，总的来说界面很清新，我倒是蛮喜欢的。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>这次更新了之后，就应该不会再进行大的变动了，也是时隔一段时间没有更新博客了。<br>原因是前一段时间满课，周末在忙着比赛，基本上是天天加班，顺着带着也记录下这段时间的经历吧</p><p>“领航杯”之后应该一直都是满课的，从早上到晚。对于课程的安排我反正是无力吐槽了，身为一名大四的信安专业学生，却在课堂上一点专业知识都学不到。</p><p>“东华杯”的线上赛发挥还是挺好的，拿下了一道密码二血，跟着蒋师傅把战队总到了决赛，可惜决赛那周周末比赛较多，少了一次线下比赛的机会。转身去打了X-nuca全国高校联赛。</p><p>X-nuca是在厦门打的，是作为“博鹭杯”同行去厦门的，虽说是同行不用上场，但X-nuca的线上同样至关重要，只有我和蒋师傅两个人参加，可以说线上打得是十分难受了，从头至尾我这个密码+三流web手只解出了一道题目，最后还是靠着徐教员的帮忙，才挺进了决赛。还是自己太菜了。。</p><p>“鹏城杯”的线上赛还是蛮轻松的，密码题拿了个一血，misc和web也是在何师傅的指导下出了几道题目，最后凭着一个不错的名次进入了决赛</p><p>X-nuca和“鹏城杯”的线下赛是我今年成长最大的一次。也正是这两场比赛真正地打醒了我这只菜鸡。。满场纷飞的pwn题打得我没脾气。由于主办方的失误有幸让我们提前拿到了源码，虽说分析了一波写出了exp，但在服务器上线的时候，瞬间就被打到绝望。</p><p>赛后打听到，牛*的大佬队伍都是本地跑好了连接ssh，down源码的脚本，就算单身二十年的手速同样是追不上计算机的脚步啊。。。跟神仙们的差距太大了，不论是思路还是技术都很落后，现在早已不是闭关修炼二十年出山就能当老大的时代了。</p><p>本事是自己的，我不甘心做一只井底之蛙。。</p>]]></content>
      
      
      
        <tags>
            
            <tag> daily </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
